name: Build APK with Dynamic Versioning

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_number:
    name: Generate Build Number
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ steps.build_out.outputs.build_number }}
    steps:
      # Генерация номера сборки
      - name: Generate build number
        id: buildnumber
        uses: onyxmueller/build-tag-number@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Сохранение build_number как output
      - name: Set output for build number
        id: build_out
        run: echo "build_number=${{ steps.buildnumber.outputs.build_number }}" >> $GITHUB_OUTPUT

  build_apk:
    name: Build and Sign APK
    runs-on: ubuntu-latest
    needs: [build_number]
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      # Чтение versionName из libs.versions.toml
      - name: Extract versionName from libs.versions.toml
        id: extract_version
        run: |
          VERSION_NAME=$(grep -E 'version\s*=\s*"' libs.versions.toml | head -n 1 | awk -F '"' '{print $2}')
          echo "version_name=${VERSION_NAME}" >> $GITHUB_ENV

      # Обновление versionName с добавлением Build Number
      - name: Update versionName with build number
        run: |
          FULL_VERSION="${{ env.version_name }}.${{ needs.build_number.outputs.build_number }}"
          sed -i "s/versionName \".*\"/versionName \"${FULL_VERSION}\"/" modules/instances/app/build.gradle
          echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_ENV

      # Build the APK
      - name: Build APK
        run: ./gradlew modules:instances:app:assembleRelease --stacktrace

      # Sign the APK
      - name: Sign APK
        id: sign_apk
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: modules/instances/app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEYSTORE_FILE }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      # Upload the APK to GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.FULL_VERSION }}
          name: "Release ${{ env.FULL_VERSION }}"
          body: "Automatically generated release with build number."
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload signed APK to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: modules/instances/app/build/outputs/apk/release/*.apk
          asset_name: app-${{ env.FULL_VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive
