name: Generate release APK and publish to GitHub releases

on:
  push:
    branches:
      - NK/03-migrate-kmp
  workflow_dispatch:

jobs:
  apk:
    name: Generate and publish release APK
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Generate `apikey.properties`
      - name: Generate apikey.properties
        run: |
          cat <<EOF > apikey.properties
          DATADOG_LOGGER_NAME:"${{ vars.DATADOG_LOGGER_NAME }}"
          DATADOG_CLIENT_TOKEN:"${{ secrets.DATADOG_CLIENT_TOKEN }}"
          ZENDESK_URL:"${{ vars.ZENDESK_URL }}"
          ZENDESK_APP_ID:"${{ secrets.ZENDESK_APP_ID }}"
          ZENDESK_OAUTH_ID:"${{ secrets.ZENDESK_OAUTH_ID }}"
          ZENDESK_CHAT_ACCOUNT_KEY:"${{ secrets.ZENDESK_CHAT_ACCOUNT_KEY }}"
          EOF

      # Generate `keystore.properties`
      - name: Generate keystore.properties
        run: |
          cat <<EOF > keystore.properties
          storePassword:${{ secrets.KEYSTORE_STORE_PASSWORD }}
          keyPassword:${{ secrets.KEYSTORE_KEY_PASSWORD }}
          keyAlias:${{ secrets.KEYSTORE_KEY_ALIAS }}
          storeFile:${{ vars.KEYSTORE_STORE_FILE_PATH }}
          EOF

      # Decode keystore
      - name: Decode keystore
        run: echo "${{ secrets.KEYSTORE_JKS_BASE64 }}" | base64 --decode > keystore.jks

      # Extract versionName from `libs.versions.toml`
      - name: Extract version number
        id: version
        run: |
          VERSION_NAME=$(grep 'versionName =' gradle/libs.versions.toml | cut -d '"' -f 2)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      # Build APK
      - name: Build release APK
        run: ./gradlew assembleRelease --stacktrace

      # Rename APK
      - name: Rename APK
        run: |
          mv "./app/build/outputs/apk/release/app-release.apk" "./app/build/outputs/apk/release/AppName-${{ env.VERSION_NAME }}.apk"

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION_NAME }}
          release_name: "Release ${{ env.VERSION_NAME }}"
          body: "Release of version ${{ env.VERSION_NAME }}"
          draft: false
          prerelease: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload APK to GitHub Release
      - name: Upload APK to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./app/build/outputs/apk/release/AppName-${{ env.VERSION_NAME }}.apk"
          asset_name: "AppName-${{ env.VERSION_NAME }}.apk"
          asset_content_type: application/vnd.android.package-archive

