name: Generate release APK and publish to GitHub releases

on:
  push:
    branches:
      - NK/03-migrate-kmp
  workflow_dispatch:

jobs:
  apk:
    name: Generate and publish release APK
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Generate `keystore.properties`
      - name: Generate keystore.properties
        run: |
          cat <<EOF > keystore.properties
          storePassword:${{ secrets.KEYSTORE_STORE_PASSWORD }}
          keyPassword:${{ secrets.KEYSTORE_KEY_PASSWORD }}
          keyAlias:${{ secrets.KEYSTORE_KEY_ALIAS }}
          storeFile:${{ vars.KEYSTORE_STORE_FILE_PATH }}
          EOF

      # Decode keystore
      - name: Decode keystore
        run: echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore.jks

      # Extract versionName from `libs.versions.toml`
      - name: Extract version number
        id: version
        run: |
          VERSION_NAME=$(grep 'versionName =' gradle/libs.versions.toml | cut -d '"' -f 2)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      # Generate `keystore.properties`
      - name: Generate keystore.properties
        run: |
          cat <<EOF > keystore.properties
          storePassword=${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          EOF
      # Build unsigned release APK
      - name: Build unsigned release APK
        run: ./gradlew assembleRelease --stacktrace

      # Find unsigned APK
      - name: Find unsigned APK
        id: apk
        run: |
          APK_PATH=$(find ./app/build/outputs/apk/release/ -name "*app-release-unsigned.apk" | head -n 1)
          if [ -z "$APK_PATH" ]; then
            echo "Error: Unsigned APK not found!" && exit 1
          fi
          echo "APK_PATH=$APK_PATH" >> $GITHUB_ENV

      # Sign the APK
      - name: Sign APK
        run: |
          jarsigner -verbose \
            -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore keystore.jks \
            -storepass ${{ secrets.KEYSTORE_PASSWORD }} \
            -keypass ${{ secrets.KEY_PASSWORD }} \
            ${{ env.APK_PATH }} \
            ${{ secrets.KEY_ALIAS }}

      # Align the APK
      - name: Align APK
        run: |
          zipalign -v -p 4 ${{ env.APK_PATH }} "./app/build/outputs/apk/release/AppName-${{ env.VERSION_NAME }}.apk"

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.VERSION_NAME }}
          release_name: "Release ${{ env.VERSION_NAME }}"
          body: "Release of version ${{ env.VERSION_NAME }}"
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      # Upload signed APK to GitHub Release
      - name: Upload signed APK to GitHub Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./app/build/outputs/apk/release/AppName-${{ env.VERSION_NAME }}.apk"
          asset_name: "AppName-${{ env.VERSION_NAME }}.apk"
          asset_content_type: application/vnd.android.package-archive




